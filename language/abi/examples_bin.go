// Code generated by go-bindata. DO NOT EDIT.
// sources:
// examples/arrays.cdc (879B)
// examples/arrays.cdc.abi.json (2.389kB)
// examples/car.cdc (737B)
// examples/car.cdc.abi.json (1.613kB)
// examples/dictionaries.cdc (304B)
// examples/dictionaries.cdc.abi.json (2.247kB)
// examples/events.cdc (487B)
// examples/events.cdc.abi.json (215B)
// examples/functions.cdc (409B)
// examples/functions.cdc.abi.json (1.231kB)
// examples/resources.cdc (492B)
// examples/resources.cdc.abi.json (1.705kB)

package abi

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _arraysCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x3d\x6f\xdd\x20\x18\x85\x77\xff\x8a\x33\x62\xc5\x8a\xfc\xb1\xd9\x45\x51\x86\x0e\x99\x3a\x74\x44\x0c\x84\x0b\xbd\x48\x5c\x62\x61\x68\x95\x46\xf9\xef\x15\x18\xc7\xbe\xd5\x55\x3f\x16\x4b\xbc\x1c\x9f\xf7\x3c\x3e\x9e\xe3\x33\x74\x74\x10\xa7\x93\xf2\x44\x8c\x60\x4f\x2e\xf0\x7a\xc4\x93\x0b\x0f\x78\xab\x2a\x00\x46\x43\xdc\x5b\xe5\xbe\x85\x33\x28\x45\x8b\xb7\x34\x85\x57\x21\x7a\x07\x67\x6c\x3a\xbe\x67\xe9\x77\xe1\x61\x40\xd1\x6e\x87\x25\x5e\xb2\x57\x9e\xa5\xe1\x8f\xb3\xb1\x0a\x06\x9f\x76\xcf\xd5\x6e\x89\x17\xd0\xfc\xbc\x83\x60\x86\x4f\x79\x9a\xcc\x0c\xee\xba\x75\xc5\xbe\x75\x89\x97\xea\xbd\xaa\xaa\x2d\xff\x4f\x33\x7f\xd1\x43\x06\x78\x74\xaf\x5f\x83\x8f\x32\x4c\x03\x6f\xf0\x3c\x26\xa2\x69\x48\x4c\xec\x70\xd7\xf3\x69\xe0\x05\x10\x56\x05\xc8\xee\xea\xdd\x9e\x83\x82\x09\xd6\x26\x0f\xd6\x72\xbe\x0b\xfb\x9b\xc2\x2e\x0b\xbb\xa3\x70\xb8\x29\xec\xb3\xb0\xe7\xfc\xb0\xfb\x56\x36\x0a\x26\xbb\x06\xb2\x6f\x20\x87\x22\x2e\xf4\x32\xb1\x6f\xe8\x52\x58\xfb\x68\x2d\xd1\xd1\xc9\x60\x5e\xdc\x02\xbd\x8c\x60\x84\xd4\xe3\x87\xe5\x43\x9d\xf9\xf7\x33\x2f\x5f\xfd\xaa\xb0\x9c\xc5\xab\xf0\x9b\x92\x82\x95\xf5\x6b\x79\x24\xb5\xa7\x97\x52\x5f\x5d\x9c\x4a\xbc\x7b\x31\xcf\xca\x9d\x88\x5e\x98\xe1\xa4\xae\x3f\xee\x0c\x35\x6b\x8d\xe5\x57\xd9\x58\xbc\x0a\x47\x1a\xfd\xe2\x3f\x0b\x79\x26\xc2\x7b\xf1\x7a\x1d\xa4\x81\x1e\x41\xc8\x01\xea\x08\x58\x8f\x7f\xc4\xfb\x5f\xbe\xbc\xff\x2f\x88\x6b\x48\x66\xf8\x3f\x63\xfe\x0a\x00\x00\xff\xff\x2d\x70\xbe\xea\x6f\x03\x00\x00")

func arraysCdcBytes() ([]byte, error) {
	return bindataRead(
		_arraysCdc,
		"arrays.cdc",
	)
}

func arraysCdc() (*asset, error) {
	bytes, err := arraysCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "arrays.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4d, 0xa6, 0x65, 0x71, 0x99, 0x4a, 0xfb, 0xcc, 0x75, 0x1f, 0xdc, 0x65, 0x83, 0xd0, 0xa8, 0x2b, 0x5a, 0x60, 0xc8, 0x59, 0xab, 0xe4, 0xd1, 0x5f, 0xc8, 0xfd, 0x14, 0x41, 0x85, 0x24, 0x51, 0xf5}}
	return a, nil
}

var _arraysCdcAbiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x31\x6f\xb3\x30\x10\xdd\xf9\x15\xa7\x9b\x99\xbe\x6c\xd9\x32\x7c\x43\xa7\x0e\xed\x56\x65\xb8\x80\xad\x5a\x72\x0c\x32\x66\x20\x15\xff\xbd\x32\x69\x82\xc1\x76\x21\xaa\x91\xda\x21\x4a\xfc\x7c\xb9\xbb\xf7\xee\x9d\xfc\x91\x01\x60\xc9\xb8\x50\xc2\x88\x4a\x35\xb8\x07\x0b\x01\x20\x95\x25\xd3\xf7\x23\x00\xf2\x56\x15\x36\xc6\xc1\x00\xb0\x26\x4d\x67\x66\x98\xb6\x7f\x7d\xbb\xe3\xe0\xc4\x0c\x71\x8a\xce\x0c\xf7\x80\x84\xf9\xf4\xc2\x74\x35\x9b\xa4\xfc\xc2\x49\x6b\xea\x02\x17\x00\x58\x71\x9b\xe9\x49\x19\x9c\xdd\xf5\x59\xec\x34\xfe\x3e\x8e\xf5\x51\x33\xd3\x6a\xf5\xea\x77\x80\x55\x6d\xa9\x92\xf4\x0a\xdd\x12\x5d\xbf\xfb\x6b\x32\x2c\x48\xca\x83\x94\xe9\xe5\xe2\x4d\x2a\xbd\x7c\x3c\xd6\xe4\x24\x22\x2a\xd1\xb4\x82\x23\xd7\x41\x75\x2f\x46\xb7\x85\x37\x1d\x57\xb8\x25\x6c\x8e\xcc\x26\x3b\xd3\x44\xd2\x89\x0d\xb5\x6f\x7c\x1a\xfc\xc1\xec\xc3\x4a\x86\x55\x5c\xc3\x3c\xec\xc3\xb0\x91\x78\xa5\xff\x53\xf1\xbe\xc1\xde\x0d\xa4\xb6\xf4\xd2\x4a\x0f\x2c\x4c\xd6\xd5\x2a\x5f\xb1\x1f\x6b\x29\x7d\xeb\xf4\xb8\x9a\xe1\xf2\x8f\x72\x0e\x39\xfc\x98\xfb\x6d\x2c\x2e\xdb\x06\x22\xff\xa1\xe5\xb8\x88\xfa\x99\xef\x7e\xf3\x9b\x34\x92\x0c\x4c\xb7\x11\x17\x9b\x75\x97\x74\x01\x4e\x49\xdf\xd3\x24\x5d\x6f\xe9\xa8\x24\x13\xf8\xf7\xd0\xe3\x12\x10\x20\x6a\xd4\xcc\x7e\xfa\xcf\x00\x00\x00\xff\xff\xf9\x74\x76\x6f\x55\x09\x00\x00")

func arraysCdcAbiJsonBytes() ([]byte, error) {
	return bindataRead(
		_arraysCdcAbiJson,
		"arrays.cdc.abi.json",
	)
}

func arraysCdcAbiJson() (*asset, error) {
	bytes, err := arraysCdcAbiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "arrays.cdc.abi.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0xe2, 0x9c, 0xd6, 0x90, 0x26, 0xce, 0x75, 0x2e, 0xf6, 0xeb, 0xd9, 0xb2, 0xa1, 0x96, 0x43, 0x62, 0x26, 0xa3, 0x10, 0x8c, 0xc3, 0x9a, 0x9f, 0x2e, 0x9c, 0xec, 0x60, 0x8d, 0xf4, 0x85, 0x7f}}
	return a, nil
}

var _carCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x31\x4f\xc3\x30\x10\x85\x77\xff\x8a\xa3\x53\x5b\x55\x84\xb6\x5b\x50\x85\x44\xa5\x4a\x0c\x4c\x8c\x55\x06\x93\x5c\x21\xaa\xed\x58\xe7\x4b\x01\xa1\xfe\x77\x74\x76\x1a\x5a\x08\x22\x83\x7d\xb9\x67\xe7\xbe\x3c\x3d\xdf\x3e\x83\x41\x86\xe0\x11\x2b\x58\xc1\xc8\xea\xf7\xda\xb6\x76\xa4\x94\x48\x81\xa9\x2d\x19\xd6\x9a\xe0\x53\x01\x00\x48\xf3\xa0\x09\x6c\x53\xa1\xc9\xe1\x89\xa9\x76\x2f\x97\x8a\xde\xe3\xa0\xc0\x54\xdb\x5e\x88\x4a\xed\x6a\x1e\xef\x5a\x63\x9c\xb6\xfd\x9d\x49\x37\x49\x9e\x80\x66\x77\x1d\x47\x09\xda\xe8\x47\x5f\xef\x71\xa0\x2d\x63\xbe\xdb\x47\xa5\xb2\x69\xac\xb2\x0c\x1e\x5b\xc3\xb5\x37\x08\x65\xe3\xd2\x9f\x35\x14\x40\x13\x82\x6b\x18\x42\xeb\x7d\x43\x8c\x15\x7c\x20\x5f\x9d\x11\x7a\x4d\xda\x86\x1c\xb6\x09\xf0\x76\x59\xfc\xc9\x98\x8e\x6e\x6f\x8a\x41\xd4\x4e\x9d\x17\x83\xc4\x9d\xba\x28\x4e\xe0\x3d\x40\x32\x3b\x4d\x9f\x25\x83\x4f\x2f\xd1\xd4\x7f\x8c\x8b\xfb\x20\x90\x6c\x83\x2c\xb2\x75\x18\xb2\x4e\x33\x75\xbc\x08\xc4\xc6\x20\xf2\x59\x24\x24\x42\xa5\x26\x31\x69\xad\xa9\x38\x63\x2f\x35\xcd\x73\x09\xd0\x4c\x0e\x2c\x62\x79\x17\xeb\x65\xaa\x7f\x61\xcb\x77\x60\x05\x5b\xb9\x79\xf2\xa2\x9b\x8e\x07\x74\x0c\x1b\x74\x15\xd2\x7d\x5c\xc7\x6f\xaf\x48\x08\xde\xe8\xb2\x4f\xd0\x0c\xca\x26\x70\x0e\x0f\x8e\x27\xea\x2b\x00\x00\xff\xff\x92\x4b\x46\xbc\xe1\x02\x00\x00")

func carCdcBytes() ([]byte, error) {
	return bindataRead(
		_carCdc,
		"car.cdc",
	)
}

func carCdc() (*asset, error) {
	bytes, err := carCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "car.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0x92, 0x73, 0xf3, 0x8, 0x4e, 0x62, 0x69, 0xb2, 0x62, 0x6b, 0x10, 0xcb, 0x2, 0x98, 0x32, 0xd2, 0x4f, 0x38, 0xae, 0x40, 0xb4, 0x87, 0x6c, 0xbc, 0xf3, 0x39, 0x72, 0xe3, 0x2a, 0x6e, 0xdb}}
	return a, nil
}

var _carCdcAbiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\xcd\x4e\xc3\x30\x0c\xc7\xef\x7d\x0a\xcb\xe7\x5e\x80\xdb\x8e\x20\x21\x71\xe6\x38\xed\xe0\xb5\x2e\x44\xa4\x69\xe5\x66\x43\x03\xf5\xdd\x51\x03\xea\x9c\x7e\x4c\xad\x34\x10\x97\x2a\xf5\x3f\x71\x7e\xfe\x88\x3f\x13\x00\xcc\xb9\x30\xce\x78\x53\xb9\x06\x37\xd0\x99\x00\xf0\x81\xa4\xff\x01\xc0\xc6\xcb\x21\xf3\xca\x02\x80\x85\x61\x9b\x77\x47\xb6\xbd\x0d\x94\x1e\xf6\x38\x2a\x19\x37\x80\x25\xbd\x31\xa6\xb1\xe6\x4f\x75\xd0\x9e\xbd\x18\xf7\x82\x4a\x6c\xd3\x05\x1e\xab\x9c\xed\x75\x5d\x7a\x31\xe5\x0a\x8f\xfd\x7a\x77\x3e\x83\x21\x93\x64\xcd\x07\xcb\x30\x35\xdb\xc8\x73\xcc\xa0\x28\x8a\x83\xb5\x61\x9d\x0e\x77\xcc\xb3\x68\x1a\x80\x5d\x32\x5c\x7d\xab\x3f\x39\xc0\x47\x76\x39\xcb\x7d\xf8\xea\x22\xf3\x91\x9d\x8f\xa0\x35\x64\x0f\x58\x5b\xca\x62\xba\x21\x59\xa4\x59\xda\xb3\xed\xc4\xf7\x57\x16\x3e\x53\xab\x8a\x4c\x5e\x93\x55\x8d\x9f\xbe\xe5\xc9\x79\xe5\x26\xd1\xa1\xf6\x21\x5a\x66\x7f\xcd\x06\xce\x48\x9a\x99\xde\x18\x55\x92\x44\xe8\x34\x21\x00\x60\x55\x4c\xda\x35\x60\x78\x7a\xa3\x1d\x6d\x72\xe9\xbf\xfd\x83\xbe\xcc\x48\x6e\x66\x7b\x72\x22\xd4\x8b\x01\x0d\xf0\xd3\xc5\x08\xb7\x6b\x10\xaa\xba\x9b\x6a\x64\x7f\x27\xe7\xcb\xa1\xef\xfe\x0f\xf4\x8a\x31\xd1\xd4\xcc\xb9\x7e\x43\x47\x12\x43\x7b\x3b\x9a\x41\xdd\xb1\x36\x69\xbf\x02\x00\x00\xff\xff\xde\x61\xab\xcb\x4d\x06\x00\x00")

func carCdcAbiJsonBytes() ([]byte, error) {
	return bindataRead(
		_carCdcAbiJson,
		"car.cdc.abi.json",
	)
}

func carCdcAbiJson() (*asset, error) {
	bytes, err := carCdcAbiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "car.cdc.abi.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x5d, 0xd, 0xc4, 0x60, 0xbf, 0xb0, 0xc5, 0x8c, 0x38, 0x6b, 0x6e, 0x66, 0x5d, 0xf0, 0x64, 0xed, 0x1f, 0x73, 0xd0, 0xc9, 0x29, 0x65, 0x9b, 0x58, 0x99, 0x6c, 0x96, 0x6b, 0x31, 0x9e, 0x88}}
	return a, nil
}

var _dictionariesCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\x8a\xc3\x30\x10\x44\x7b\x7d\xc5\x94\x16\xb8\xb8\x6b\x17\x0e\x73\x45\x0a\xd7\x2e\x8d\x0b\xd9\x91\x92\x80\x90\x8c\xb4\x2a\x82\xf1\xbf\x07\x4b\x21\x71\x88\xab\x61\x66\x77\xdf\xec\x9c\x46\x58\xcd\x18\xbd\xb7\x11\x7f\x58\x04\x00\xfc\x10\x8c\xb2\x51\xd7\xd9\xfd\x12\x38\x24\x2d\x56\x21\xb6\x75\x93\x1c\x8c\x0f\x27\x35\x5d\xab\x33\x61\xe9\x38\xdc\xdc\x85\x50\x74\xad\x61\x08\x55\x55\x5c\x5d\x44\xd2\xbf\xbb\x77\x1c\xd2\xc4\x8d\x94\x84\xfe\x6d\x87\x67\x65\xd0\x9c\x82\x43\x3f\xec\x6b\x38\x28\x17\x67\x1f\xf5\x51\x91\xfc\x8e\x3e\x59\xcb\xba\x67\x4d\xca\xda\x8c\x69\x1d\x6f\x0f\xb6\x8e\x25\xf5\xe5\xb0\x19\x64\xc6\xe5\xd1\x2b\x3b\xc2\x3d\x02\x00\x00\xff\xff\x51\xa4\x70\xea\x30\x01\x00\x00")

func dictionariesCdcBytes() ([]byte, error) {
	return bindataRead(
		_dictionariesCdc,
		"dictionaries.cdc",
	)
}

func dictionariesCdc() (*asset, error) {
	bytes, err := dictionariesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dictionaries.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0x49, 0x68, 0xbb, 0xfc, 0x52, 0x65, 0x6a, 0x2, 0xd8, 0xe4, 0x78, 0x60, 0x37, 0x8d, 0x76, 0xd6, 0x5a, 0x53, 0x3a, 0xb7, 0x62, 0x50, 0xc6, 0x85, 0xdb, 0x2c, 0xf0, 0xed, 0x70, 0x86, 0xb3}}
	return a, nil
}

var _dictionariesCdcAbiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\xcd\x4e\xf3\x30\x10\xbc\xf7\x29\x56\x7b\xee\x13\x7c\xb7\x0f\x89\x03\xe7\x72\x43\x1c\xb6\xa9\x03\x16\xae\x1d\x6d\x9c\x4a\x11\xca\xbb\x23\x07\x94\xda\xc9\xda\x09\x48\x3d\x20\x0e\x55\xeb\xfd\xa9\x67\xc6\x3b\xfb\xbe\x03\xc0\x93\xaa\xb5\xd5\x5e\x3b\xdb\xe2\x3f\x08\x21\x00\x3c\x3a\x67\xae\x47\x00\xbc\x10\x6b\x3a\x1a\x15\xc5\x42\xaf\xae\x42\x23\x71\x9f\xc4\x01\xf0\x4d\xf5\xa1\x1f\x1f\xac\xc7\x7d\x9c\xb8\x90\xe9\xd4\x98\xba\x73\xce\xe0\x94\x1a\x76\xf1\xf7\xf0\xd9\x83\x15\x19\x13\xc3\xa8\x3b\x3b\xde\x98\xc2\x68\x88\xe9\xac\xbc\xe2\xf0\xbf\x4f\xd1\x6d\x31\x24\x00\xb4\x74\x0e\x04\xf0\x94\x40\x02\x40\xdf\x37\x6a\xc6\xa0\xcc\x6f\x85\xe5\x9c\xeb\xb2\x35\xc7\x25\xa9\xc8\xf2\x4a\xaa\xc2\xe5\x62\xee\x79\x09\x69\x6c\x60\xe5\x3b\xb6\x8f\x32\xe7\xa9\x8a\x98\x49\xa6\x3d\x95\xb8\xba\x98\x0f\x15\xcd\xa8\x5f\x78\x43\x3c\x78\xd6\xf6\x45\x86\x0a\xd1\x04\x6c\x8b\x4b\xd1\x65\x6c\x1e\x49\xcf\xf1\xe9\xfa\x3b\x92\x2d\x2f\x55\x69\x34\x0a\x63\x91\x1f\x89\x82\xde\x79\x9d\x37\xe9\xfb\x13\x0d\x64\x37\xd6\x8e\xef\xa9\x7a\xfd\x05\x86\xfc\xd2\xa2\xe4\xc9\x8c\x5e\x05\x75\xf6\xeb\x44\xea\xad\x44\x8a\xe6\x5f\x37\x7e\x9e\x20\xe4\x07\x41\xd8\x07\xeb\xbb\x20\x19\xb1\xff\xb6\x3f\x78\xee\x2a\x61\xe1\xdc\xce\x69\xb2\x31\x64\x53\x6c\x41\xfb\x9d\x89\xf7\x4c\xb6\x6d\x5c\xab\xfe\xea\xcc\xdf\x60\x2b\x8a\x38\x8b\x18\xb3\xaf\xb4\x0b\x9f\xe1\x23\x00\x00\xff\xff\x6d\x3a\x44\x59\xc7\x08\x00\x00")

func dictionariesCdcAbiJsonBytes() ([]byte, error) {
	return bindataRead(
		_dictionariesCdcAbiJson,
		"dictionaries.cdc.abi.json",
	)
}

func dictionariesCdcAbiJson() (*asset, error) {
	bytes, err := dictionariesCdcAbiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dictionaries.cdc.abi.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0xc0, 0x53, 0x7b, 0xd8, 0x84, 0x7b, 0x61, 0x68, 0x21, 0x8b, 0x6b, 0x29, 0xd1, 0x63, 0x2f, 0x8b, 0xf7, 0xf8, 0x94, 0xf6, 0x11, 0xf8, 0x48, 0x67, 0xd, 0x2a, 0x9e, 0xa, 0x85, 0x50, 0x6b}}
	return a, nil
}

var _eventsCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xbb\x6e\xf2\x40\x10\x85\xfb\x79\x8a\x53\x02\x42\xbf\xf5\x37\x29\x2c\xa1\x44\x21\x0d\x15\x05\xa4\x42\x08\x19\xef\x18\x8f\x62\x66\xd1\xee\x38\x56\x84\x78\xf7\xc8\x37\x72\x73\x79\x3c\xdf\xf9\x76\x26\x99\x11\x25\x09\xb6\xeb\x97\x35\x96\x75\x08\xac\x56\x7d\x80\xdf\x59\x2d\x22\xcf\x54\xbd\x21\xf7\x6a\x99\x28\x02\x47\x5f\x87\x9c\x23\xb2\x88\x42\xb8\x72\x73\x1c\x6b\x83\x95\x12\x21\x11\x47\x16\x3d\xa1\xf1\xe1\x8d\x1d\xbc\x12\x45\x0b\x75\x6e\xd8\x30\x3b\x5c\x09\x00\x2e\xf5\x11\x15\x1b\xc4\xa5\x58\xa9\x51\x17\x8a\x8a\x4d\x86\x64\x3a\x0c\xb6\x5f\xe4\xaa\xf8\x27\x0e\x0b\x88\xeb\xc2\x1b\xdd\x88\x68\x7c\x06\xb6\xfe\x9c\x99\xff\xd5\x1c\x99\x5d\x4c\xb1\x6b\xa5\xfb\x6f\xfd\x3f\xf2\x3f\x96\xee\x2f\x16\x3d\xfd\xe5\xea\xee\x80\x65\xe9\x2f\x17\x76\x13\xeb\x7c\xe9\xe0\x9d\xf7\xc3\x87\x8a\x0b\xbb\xf7\x8e\xc8\xb6\x0c\xbe\x99\x34\x25\x07\xc6\x88\x3d\x8d\x5c\xe9\x9b\x43\x91\x05\x38\x89\x96\x69\xce\x29\x5e\x57\x6a\xff\x1f\xee\xf4\xb3\xaf\x4f\xa5\x0d\x3e\x8e\x29\xae\x1b\x0b\xa2\xa7\x14\xbb\xbe\xe3\x71\x7f\x9b\xd2\x2c\x21\x6a\xb7\xee\x99\x8d\x6f\xba\x1d\x53\xf4\xb3\x73\x98\x9c\x5b\xb6\x3d\x2a\x7d\x06\x00\x00\xff\xff\x04\x94\x1f\xd3\xe7\x01\x00\x00")

func eventsCdcBytes() ([]byte, error) {
	return bindataRead(
		_eventsCdc,
		"events.cdc",
	)
}

func eventsCdc() (*asset, error) {
	bytes, err := eventsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "events.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0x2b, 0x3a, 0xed, 0x41, 0xea, 0xd4, 0x12, 0xc9, 0x4d, 0x22, 0xd7, 0x90, 0x66, 0x4e, 0x5a, 0x91, 0x6a, 0x1e, 0xb8, 0x87, 0x2c, 0x36, 0x98, 0x51, 0xc, 0xa0, 0x85, 0x33, 0x9, 0x6b, 0x26}}
	return a, nil
}

var _eventsCdcAbiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x4a\x49\x4d\xcb\xcc\xcb\x2c\xc9\xcc\xcf\x2b\x56\xb2\x52\x00\x09\x29\x28\x28\x05\xe7\x97\xc3\x39\x0a\x0a\x4a\xa9\x65\xa9\x79\x25\x4a\x56\x0a\xd1\x50\x01\x05\xb8\x14\x58\x3a\x2f\x31\x37\x55\xc9\x4a\x41\xa9\x38\x35\x35\x45\x49\x07\x59\xa6\xa4\xb2\x00\x2c\x13\x5c\x52\x94\x99\x97\xae\x04\x97\xaa\xd5\xc1\x6f\x52\x49\x66\x6e\x6a\x31\x76\xa3\x3c\xf3\x4a\x90\xcc\x81\xb2\x62\xb9\x60\xbc\x5a\xae\x5a\x40\x00\x00\x00\xff\xff\xf0\x63\x29\xc6\xd7\x00\x00\x00")

func eventsCdcAbiJsonBytes() ([]byte, error) {
	return bindataRead(
		_eventsCdcAbiJson,
		"events.cdc.abi.json",
	)
}

func eventsCdcAbiJson() (*asset, error) {
	bytes, err := eventsCdcAbiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "events.cdc.abi.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0x23, 0x69, 0x46, 0x3b, 0x27, 0x61, 0x2d, 0xb4, 0x5, 0xff, 0xa3, 0x28, 0x17, 0xfe, 0x78, 0x1f, 0x3c, 0xb5, 0x5c, 0xe1, 0x64, 0xe2, 0xe2, 0xfa, 0xbd, 0x6e, 0x40, 0x20, 0xe, 0x8d, 0x14}}
	return a, nil
}

var _functionsCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x31\x4f\x03\x31\x0c\x85\xf7\xfb\x15\x6f\x74\x50\x25\xf6\xa2\x8a\xb9\x1b\x13\x7b\xee\x62\xa3\x48\xe0\x80\xeb\xa0\x93\xd0\xfd\x77\x94\xe3\x7a\x4a\x69\x06\x27\x7e\x71\xbe\xf7\xf2\x59\x47\x48\x55\x5c\xbe\xcc\x69\xc6\x7c\xc4\x59\x3d\xac\xf5\x67\x00\x00\x63\xaf\xa6\x98\x1f\xe6\x61\x19\x86\xeb\x78\xca\xdf\x39\xb1\xbd\x58\x49\x75\x62\xa3\xd6\x5f\x8a\x21\x5d\xdf\x13\xad\x7b\x2b\xb8\x01\x49\x55\x8a\xf6\x56\x3f\x58\x7d\xb7\x3b\xab\x6f\x53\xbd\xe5\x63\x7a\x5a\xb5\xe5\xc6\x99\xa7\x62\xd1\x8b\x91\x54\x9d\x3c\x17\x85\x34\xbb\x70\x7c\x2d\x39\x85\x03\x46\x96\x62\xdc\x49\xcf\x07\x44\x71\xb6\x5e\x0a\x5d\x73\x97\x0f\x14\xba\x34\x59\xf0\xce\x8e\x11\xa7\x0d\xdd\xdd\xb5\x35\x52\xd8\xfb\x65\x3f\x49\xa7\x6e\x84\x88\xd3\x5f\x90\x7f\x80\x78\x07\x68\x1f\xfe\x0d\x00\x00\xff\xff\x73\x4e\xca\x61\x99\x01\x00\x00")

func functionsCdcBytes() ([]byte, error) {
	return bindataRead(
		_functionsCdc,
		"functions.cdc",
	)
}

func functionsCdc() (*asset, error) {
	bytes, err := functionsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "functions.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0x7, 0xdc, 0xa3, 0x25, 0xd5, 0x27, 0xcf, 0x2d, 0x30, 0xc3, 0x50, 0x31, 0xe5, 0x8f, 0xf3, 0x35, 0x43, 0x83, 0x4a, 0x7a, 0xef, 0x42, 0x24, 0x6b, 0xb9, 0x88, 0xb2, 0xaa, 0x14, 0x1c, 0x71}}
	return a, nil
}

var _functionsCdcAbiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\x41\x4e\xc4\x30\x0c\x45\xf7\x3d\x85\xe5\x35\x27\x98\x1b\xb0\x63\xc1\x0e\xcd\x22\xd3\x38\x52\xa4\x4e\x52\x5c\x17\x0d\x42\xbd\x3b\x4a\x98\x86\x26\x34\x40\x51\xd1\x2c\xaa\x46\xdf\x8e\xfd\xfe\x57\xde\x1a\x00\xd4\x64\xac\xb3\x62\xbd\x1b\xf0\x00\x41\x8a\x62\xeb\x59\x89\xe7\x24\x01\xa0\x19\x5d\x1b\xfa\x16\x1a\x00\xf6\x8a\xd5\x99\x84\x38\x5c\x7f\x4a\x3a\x2c\x7a\x62\x9f\x53\x67\xc2\x03\xa0\xc1\xbb\xbc\x20\xaf\x3d\x65\x23\x57\xd6\x4d\x59\x71\x2a\x26\x74\xea\x44\x5d\x9c\x3d\x5f\x69\x2a\xcd\x15\xa6\x13\x19\xcf\xf4\x5b\x30\xdf\x87\x1d\xaa\x5b\xa9\x7d\x8b\x0d\x50\xd8\xd8\x48\xa9\x8c\x10\xdf\x14\x32\x9d\x8f\x9f\x14\xc8\x24\x23\xbb\xc7\xaf\x1c\x95\x2d\xf3\xe9\xe3\x7f\x35\x8e\xda\xbe\x58\x4d\xfc\xc0\x5e\x8f\x2d\xfd\xc3\xbb\xd3\x95\xe4\xf0\xde\x49\x59\x4a\x0f\x2a\x50\x0d\x9e\x71\xa7\x10\xf2\x2d\x55\x07\xb1\x1a\xb0\x32\xed\x58\x40\x66\x2b\xcb\xf6\x9f\xe2\x1e\x9e\x59\xf6\xcf\xf8\xf2\x97\x8c\x2f\x1b\xd3\x5d\x5a\xbd\x9a\x6a\xc2\x37\xbd\x07\x00\x00\xff\xff\xff\xc8\x80\x1f\xcf\x04\x00\x00")

func functionsCdcAbiJsonBytes() ([]byte, error) {
	return bindataRead(
		_functionsCdcAbiJson,
		"functions.cdc.abi.json",
	)
}

func functionsCdcAbiJson() (*asset, error) {
	bytes, err := functionsCdcAbiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "functions.cdc.abi.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0xce, 0x73, 0x91, 0xbe, 0x71, 0x8e, 0x13, 0x80, 0x60, 0x10, 0xee, 0xc8, 0x7c, 0xbc, 0x28, 0x43, 0x77, 0xd6, 0xb0, 0xb2, 0x64, 0x7e, 0xcf, 0x84, 0x21, 0x65, 0x54, 0x5e, 0xc7, 0xa9, 0xfe}}
	return a, nil
}

var _resourcesCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x31\x6b\xc3\x30\x14\x84\x77\xfd\x8a\x1b\x5d\x70\x3b\x17\x53\xd1\xd2\x4e\x9d\x32\x65\x0a\x1e\x2c\x45\x76\x0c\x46\x0a\x4f\xd2\x10\x82\xff\x7b\xb0\x24\x1b\xcb\x4e\xb4\x08\xbe\xf7\xee\xdd\xdd\xd5\x0b\x58\x47\x5e\x3a\xfc\x99\xc1\x78\xc2\x9d\x01\xc0\xc4\x07\xe5\x40\x15\x8e\xff\xda\x7d\x66\xb0\x7b\x06\xc5\x0c\x03\xed\x75\xef\x8a\x59\x5c\x2e\x8a\x72\x59\x7b\x4b\x46\xd3\xb3\x6a\x68\x3f\x08\x1c\x94\xa3\x0e\x1c\x5d\x8e\x04\x38\x44\x40\x23\x1b\x19\x9b\xcc\x49\x59\xe3\x49\x2a\xfc\x36\xba\xd1\xcd\xa6\x80\x0c\xad\xaa\xd4\x6e\x15\x2e\x1f\xec\xe2\xc4\x31\x78\x3a\xf0\xca\xd2\x6b\x79\x39\xb4\xd1\xd9\x6e\xac\x45\xa4\x15\x7e\x4e\x71\xe1\xbb\x5e\xf9\xef\xa6\xf5\x2e\x43\x5a\xc1\xd7\xfb\x7c\x2b\xc5\x08\xdf\x59\x59\x47\xe6\x56\xac\x65\x89\x65\xf2\x25\xfa\x23\x00\x00\xff\xff\x2c\x96\xc5\xf3\xec\x01\x00\x00")

func resourcesCdcBytes() ([]byte, error) {
	return bindataRead(
		_resourcesCdc,
		"resources.cdc",
	)
}

func resourcesCdc() (*asset, error) {
	bytes, err := resourcesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0xbc, 0xa8, 0xf8, 0x1a, 0x83, 0x8c, 0x44, 0xe0, 0x3f, 0xd2, 0xa7, 0xce, 0x4c, 0x49, 0x19, 0xe8, 0xdd, 0x1b, 0x73, 0xc1, 0x2f, 0xe8, 0x9a, 0xda, 0x2b, 0xea, 0x33, 0x2b, 0xb5, 0x11, 0xd9}}
	return a, nil
}

var _resourcesCdcAbiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x3d\x4f\xc4\x30\x0c\xdd\xfb\x2b\x2c\xcf\xfd\x01\x88\x11\x26\x26\x26\xa6\xd3\x0d\xa6\x97\x42\xa4\x92\x9c\xd2\x74\x38\x50\xfe\x3b\xca\x35\x94\x24\xcd\xc7\x09\xb5\x0c\x95\x92\x67\xfb\xd5\x7e\x7e\xca\x57\x03\x80\x27\xd6\x73\xc1\x35\x97\x62\xc4\x7b\xb0\x10\x00\x3e\x90\x20\x41\xcb\x1d\x00\x15\x1b\xe5\xa4\x3a\xe6\x61\x00\xd8\x73\x36\x9c\x6c\xdd\x61\xc1\xc0\x8b\x5f\x73\x04\x7d\xd8\x2a\xec\xe4\x20\x27\x85\x6d\x18\xd5\x97\x73\xc8\xe9\xf0\x51\xab\xa9\xd3\xb6\xee\x71\xae\x0b\x12\x4c\x93\x3a\x1f\x7f\xb9\xf1\x3a\x13\x0d\xfc\x93\xa9\xb8\xbf\x43\x40\xb5\xfa\x73\xb1\xdf\x7c\xc7\xd5\x9e\xc3\xae\xc3\xdb\xb1\x89\x4f\x73\xd4\xb4\x6e\x1f\x93\xe8\xde\x9f\xfb\x79\x2d\xe3\xb6\x7b\x79\x75\xa4\x37\x2e\x86\x94\xa2\x4b\x7a\x7e\xd9\x27\x71\x1b\x39\x5b\x83\xd1\x90\x89\x87\x73\xfc\xb8\x2f\x91\x68\x56\x58\x8c\xe4\x35\xde\xcb\x27\x69\xfd\x8a\x46\xc9\x6b\x58\x52\xf1\x5f\x54\xaa\x39\xd1\x39\xdb\x73\xe0\xe2\xfa\xbf\xfa\x2f\xe3\x3c\x7c\x79\x12\xfa\xce\x9f\xcf\xb4\x75\xb6\xb7\x4d\xd9\x72\xcf\x55\x82\x6d\x27\x77\xe5\x1f\xa0\x75\x0f\xd1\x4c\x05\xd6\x58\xa5\x6d\x58\xe3\x4d\x56\x58\x6f\x71\x5d\x63\x3f\xf3\x1d\x00\x00\xff\xff\x5d\x2f\xc4\xe9\xa9\x06\x00\x00")

func resourcesCdcAbiJsonBytes() ([]byte, error) {
	return bindataRead(
		_resourcesCdcAbiJson,
		"resources.cdc.abi.json",
	)
}

func resourcesCdcAbiJson() (*asset, error) {
	bytes, err := resourcesCdcAbiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.cdc.abi.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0xe5, 0xb8, 0xc3, 0x27, 0xfd, 0xdb, 0x6b, 0x4, 0x6d, 0xb6, 0xe, 0x1d, 0x8b, 0x85, 0x44, 0x4b, 0x60, 0x65, 0x5f, 0xbd, 0x91, 0x4e, 0x2e, 0x9e, 0x23, 0x8, 0x2c, 0xbf, 0xe6, 0x65, 0xed}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"arrays.cdc": arraysCdc,

	"arrays.cdc.abi.json": arraysCdcAbiJson,

	"car.cdc": carCdc,

	"car.cdc.abi.json": carCdcAbiJson,

	"dictionaries.cdc": dictionariesCdc,

	"dictionaries.cdc.abi.json": dictionariesCdcAbiJson,

	"events.cdc": eventsCdc,

	"events.cdc.abi.json": eventsCdcAbiJson,

	"functions.cdc": functionsCdc,

	"functions.cdc.abi.json": functionsCdcAbiJson,

	"resources.cdc": resourcesCdc,

	"resources.cdc.abi.json": resourcesCdcAbiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"arrays.cdc":                &bintree{arraysCdc, map[string]*bintree{}},
	"arrays.cdc.abi.json":       &bintree{arraysCdcAbiJson, map[string]*bintree{}},
	"car.cdc":                   &bintree{carCdc, map[string]*bintree{}},
	"car.cdc.abi.json":          &bintree{carCdcAbiJson, map[string]*bintree{}},
	"dictionaries.cdc":          &bintree{dictionariesCdc, map[string]*bintree{}},
	"dictionaries.cdc.abi.json": &bintree{dictionariesCdcAbiJson, map[string]*bintree{}},
	"events.cdc":                &bintree{eventsCdc, map[string]*bintree{}},
	"events.cdc.abi.json":       &bintree{eventsCdcAbiJson, map[string]*bintree{}},
	"functions.cdc":             &bintree{functionsCdc, map[string]*bintree{}},
	"functions.cdc.abi.json":    &bintree{functionsCdcAbiJson, map[string]*bintree{}},
	"resources.cdc":             &bintree{resourcesCdc, map[string]*bintree{}},
	"resources.cdc.abi.json":    &bintree{resourcesCdcAbiJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
