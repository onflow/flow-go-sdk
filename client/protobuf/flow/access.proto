syntax = "proto3";

package flow;

option go_package = "flow";

import "flow/entities.proto";

// AccessAPI is the public-facing API provided by access nodes.
service AccessAPI {

  // Ping is used to check if the access node is alive and healthy.
  rpc Ping (PingRequest) returns (PingResponse);

  // Block Headers
  
  // GetLatestBlockHeader gets the latest sealed or unsealed block header.
  rpc GetLatestBlockHeader (GetLatestBlockHeaderRequest) returns (BlockHeaderResponse);
  // GetBlockHeaderByID gets a block header by ID.
  rpc GetBlockHeaderByID (GetBlockHeaderByIDRequest) returns (BlockHeaderResponse);
  // GetBlockHeaderByHeight gets a block header by height.
  rpc GetBlockHeaderByHeight (GetBlockHeaderByHeightRequest) returns (BlockHeaderResponse);

  // Blocks

  // GetLatestBlock gets the full payload of the latest sealed or unsealed block.
  rpc GetLatestBlock (GetLatestBlockRequest) returns (BlockResponse);
  // GetBlockByID gets a full block by ID.
  rpc GetBlockByID (GetBlockByIDRequest) returns (BlockResponse);
  // GetBlockByHeight gets a full block by height.
  rpc GetBlockByHeight (GetBlockByHeightRequest) returns (BlockResponse);

  // Collections

  // GetCollectionByID gets a collection by ID.
  rpc GetCollectionByID (GetCollectionByIDRequest) returns (CollectionResponse);

  // Transactions

  // SendTransaction submits a transaction to the network.
  rpc SendTransaction (SendTransactionRequest) returns (SendTransactionResponse);
  // GetTransaction gets a transaction by ID.
  rpc GetTransaction (GetTransactionRequest) returns (TransactionResponse);
  // GetTransactionResult gets the result of a transaction.
  rpc GetTransactionResult (GetTransactionRequest) returns (TransactionResultResponse);

  // Accounts

  // GetAccount gets an account by address.
  rpc GetAccount (GetAccountRequest) returns (GetAccountResponse);

  // Scripts

  // ExecuteScriptAtLatestBlock executes a read-only Cadance script against the latest sealed execution state.
  rpc ExecuteScriptAtLatestBlock (ExecuteScriptAtLatestBlockRequest) returns (ExecuteScriptResponse);
  // ExecuteScriptAtBlockID executes a ready-only Cadence script against the execution state at the block with the given ID.
  rpc ExecuteScriptAtBlockID (ExecuteScriptAtBlockIDRequest) returns (ExecuteScriptResponse);
  // ExecuteScriptAtBlockHeight executes a ready-only Cadence script against the execution state at the given block height.
  rpc ExecuteScriptAtBlockHeight (ExecuteScriptAtBlockHeightRequest) returns (ExecuteScriptResponse);

  // Events

  // GetEvents retrieves events matching the given query.
  rpc GetEvents (GetEventsRequest) returns (GetEventsResponse);
}

message PingRequest {}

message PingResponse {}

// Block Headers

message GetLatestBlockHeaderRequest {
  bool is_sealed = 1;
}

message GetBlockHeaderByIDRequest {
  bytes id = 1;
}

message GetBlockHeaderByHeightRequest {
  uint64 height = 1;
}

message BlockHeaderResponse {
  flow.BlockHeader block = 1;
}

// Blocks

message GetLatestBlockRequest {
  bool is_sealed = 1;
}

message GetBlockByIDRequest {
  bytes id = 1;
}

message GetBlockByHeightRequest {
  uint64 height = 1;
}

message BlockResponse {
  flow.Block block = 1;
}

// Collections

message GetCollectionByIDRequest {
  bytes id = 1;
}

message CollectionResponse {
  flow.Collection collection = 1;
}

// Transactions

message SendTransactionRequest {
  flow.Transaction transaction = 1;
}

message SendTransactionResponse {
  bytes id = 1;
}

message GetTransactionRequest {
  bytes id = 1;
}

message TransactionResponse {
  flow.Transaction transaction = 1;
}

message TransactionResultResponse {
  flow.TransactionStatus status = 1;
  repeated flow.Event events = 2;
}

// Accounts

message GetAccountRequest {
  bytes address = 1;
}

message GetAccountResponse {
  flow.Account account = 1;
}

// Scripts

message ExecuteScriptAtLatestBlockRequest {
  bytes script = 1;
}

message ExecuteScriptAtBlockIDRequest {
  bytes block_id = 1;
  bytes script = 2;
}

message ExecuteScriptAtBlockHeightRequest {
  uint64 block_height = 1;
  bytes script = 2;
}

message ExecuteScriptResponse {
  bytes value = 1;
}

// Events

message GetEventsRequest {
  string type = 1;
  uint64 start_block = 2;
  uint64 end_block = 3;
}

message GetEventsResponse {
  repeated flow.Event events = 1;
}
