syntax = "proto3";

package flow.services.observation;

option go_package = "observation";

import "sdk/entities/entities.proto";

// ObserveService is the user-facing API provided by access nodes.
service ObserveService {
  rpc Ping(PingRequest) returns (PingResponse);

  // SendTransaction submits a transaction to the network.
  rpc SendTransaction(SendTransactionRequest) returns (SendTransactionResponse);
  // GetLatestBlock gets the latest sealed or unsealed block.
  rpc GetLatestBlock(GetLatestBlockRequest) returns (GetLatestBlockResponse);
  // GetTransactions gets a transaction by hash.
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);
  // GetAccount gets an account by address.
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse);
  // ExecuteScript executes a script against the latest sealed world state.
  rpc ExecuteScript(ExecuteScriptRequest) returns (ExecuteScriptResponse);
  // GetEvents retrieves events matching a given query.
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse);
}

message PingRequest {}

message PingResponse {
  bytes address = 1;
}

message SendTransactionRequest {
  flow.sdk.entities.Transaction transaction = 1;
}

message SendTransactionResponse {
  bytes hash = 1;
}

message GetLatestBlockRequest {
  bool is_sealed = 1;
}

message GetLatestBlockResponse {
  flow.sdk.entities.BlockHeader block = 1;
}

message GetAccountRequest {
  bytes address = 1;
}

message GetAccountResponse {
  flow.sdk.entities.Account account = 1;
}

message ExecuteScriptRequest {
  bytes script = 1;
}

message ExecuteScriptResponse {
  bytes value = 1;
}

message GetEventsRequest {
    string type = 1;
    uint64 start_block = 2;
    uint64 end_block = 3;
}

message GetEventsResponse {
    repeated flow.sdk.entities.Event events = 1;
}


message GetTransactionRequest {
  bytes hash = 1;
}

message GetTransactionResponse {
  flow.sdk.entities.Transaction transaction = 1;
  repeated flow.sdk.entities.Event events = 2;

}
